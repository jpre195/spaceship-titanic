{"timestamp": 1711392898.136, "stored_source_code": "# Add description here\n#\n# *Note:* You can open this file as a notebook (JupyterLab: right-click on it in the side bar -> Open With -> Notebook)\n# Uncomment the next two lines to enable auto reloading for imported modules\n# %load_ext autoreload\n# %autoreload 2\n# For more info, see:\n# https://docs.ploomber.io/en/latest/user-guide/faq_index.html#auto-reloading-code-in-jupyter\n# If this task has dependencies, list them them here\n# (e.g. upstream = ['some_task']), otherwise leave as None.\nupstream = None\n\n# This is a placeholder, leave it as None\nproduct = None\nimport pickle as pkl\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n\ntrain = pd.read_csv('./data/train.csv')\ntest = pd.read_csv('./data/test.csv')\n\nencoder = OneHotEncoder(drop = 'first', sparse_output = False)\n\ntrain.set_index('PassengerId', inplace = True)\ntest.set_index('PassengerId', inplace = True)\n\ntrain['Deck'] = [np.nan if pd.isna(cabin) else cabin.split('/')[0] for cabin in train['Cabin']]\ntrain['CabinNumber'] = [np.nan if pd.isna(cabin) else cabin.split('/')[1] for cabin in train['Cabin']]\ntrain['Side'] = [np.nan if pd.isna(cabin) else cabin.split('/')[2] for cabin in train['Cabin']]\n\ntest['Deck'] = [np.nan if pd.isna(cabin) else cabin.split('/')[0] for cabin in test['Cabin']]\ntest['CabinNumber'] = [np.nan if pd.isna(cabin) else cabin.split('/')[1] for cabin in test['Cabin']]\ntest['Side'] = [np.nan if pd.isna(cabin) else cabin.split('/')[2] for cabin in test['Cabin']]\n\ntrain['CryoSleep'] = [1 if bool(cryosleep) else 0 for cryosleep in train['CryoSleep']]\ntrain['VIP'] = [1 if bool(vip) else 0 for vip in train['VIP']]\n\ntest['CryoSleep'] = [1 if bool(cryosleep) else 0 for cryosleep in test['CryoSleep']]\ntest['VIP'] = [1 if bool(vip) else 0 for vip in test['VIP']]\n\ntrain.drop('Cabin', axis = 1, inplace = True)\ntest.drop('Cabin', axis = 1, inplace = True)\n\ncat_vars = ['HomePlanet', 'Destination', 'Deck', 'Side']\n\ntrain_cat = train[cat_vars]\ntest_cat = test[cat_vars]\n\ntrain_cat = encoder.fit_transform(train_cat)\ntest_cat = encoder.transform(test_cat)\n\ntrain_cat = pd.DataFrame(train_cat, columns = encoder.get_feature_names_out())\ntrain_cat.index = train.index\n\ntest_cat = pd.DataFrame(test_cat, columns = encoder.get_feature_names_out())\ntest_cat.index = test.index\n\ntrain_cat.reset_index(inplace = True)\ntrain.reset_index(inplace = True)\n\ntest_cat.reset_index(inplace = True)\ntest.reset_index(inplace = True)\n\ntrain = train.merge(train_cat, how = 'left', on = 'PassengerId')\ntest = test.merge(test_cat, how = 'left', on = 'PassengerId')\n\ntrain.drop(cat_vars, axis = 1, inplace = True)\ntest.drop(cat_vars, axis = 1, inplace = True)\n\ntrain.drop('Name', axis = 1, inplace = True)\ntest.drop('Name', axis = 1, inplace = True)\n\ntrain['Transported'] = [1 if transported else 0 for transported in train['Transported']]\n\ntrain.dropna(inplace = True)\n\ntrain = train[sorted(train.columns)]\ntest = test[sorted(test.columns)]\n\ntrain, val = train_test_split(train, test_size = 0.2)\n\nwith open(product['encoder'], 'wb') as f:\n\n    pkl.dump(encoder, f)\n\ntrain.to_csv(product['train'], index = False)\nval.to_csv(product['val'], index = False)\ntest.to_csv(product['test'], index = False)", "params": {}}